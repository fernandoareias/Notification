version: "3.4"

services:
  web-api:
    image: notification-api:1.0
    container_name: web-api
    build:
      context: .
      dockerfile: ./Dockerfile.API
    networks:
      - common.network
    cpu_shares: 215
    cpu_quota: 50000
    mem_limit: 120m
    env_file: env.conf
    depends_on:
      - rabbitmq

  web-api2:
    image: notification-api:1.0
    container_name: web-api2
    build:
      context: .
      dockerfile: ./Dockerfile.API
    networks:
      - common.network
    cpu_shares: 215
    cpu_quota: 50000
    mem_limit: 120m
    env_file: env.conf
    depends_on:
      - rabbitmq

  nginx:
    build:
      dockerfile: ./nginx/Dockerfile
      context: .
    image: nginx
    container_name: load-balancer
    ports:
      - "80:80"
    networks:
      - common.network
    depends_on:
      - "web-api"
      - "web-api2"

  worker:
    image: notification-worker:1.0
    build:
      context: .
      dockerfile: ./Dockerfile.Worker
    networks:
      - common.network
    cpu_shares: 512
    cpu_quota: 50000
    mem_limit: 250m
    env_file: env.conf
    depends_on:
      - rabbitmq

  worker2:
    image: notification-worker:1.0
    build:
      context: .
      dockerfile: ./Dockerfile.Worker
    networks:
      - common.network
    cpu_shares: 512
    cpu_quota: 50000
    mem_limit: 250m
    env_file: env.conf
    depends_on:
      - rabbitmq

  worker3:
    image: notification-worker:1.0
    build:
      context: .
      dockerfile: ./Dockerfile.Worker
    networks:
      - common.network
    cpu_shares: 512
    cpu_quota: 50000
    mem_limit: 512m
    env_file: env.conf
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - common.network
    ports:
      - "5672:5672"
      - "15672:15672"

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    container_name: "rabbitmq-exporter"
    ports:
      - "9419:9419" # exposed on container providing the port
    networks:
      - common.network
    environment:
      - RABBIT_URL=http://host.docker.internal:15672
      - RABBIT_USER=admin
      - RABBIT_PASSWORD=admin

  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    networks:
      - common.network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongodb-exporter:
    image: percona/mongodb_exporter:2.37.0
    container_name: percona
    command: --mongodb.uri=mongodb://host.docker.internal:27017/admin --collect-all --discovering-mode
    ports:
      - 9216:9216
    networks:
      - common.network
    depends_on:
      - mongo1

  node-exporter:
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    expose:
      - 9100
    image: prom/node-exporter:v1.2.0
    networks:
      - "common.network"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
      args:
        version: 1
    image: prometheus-local
    restart: always
    ports:
      - 9090:9090
    networks:
      - common.network

  granafa:
    build:
      context: ./grafana
      dockerfile: ./Dockerfile
      args:
        version: 1
    image: grafana-local
    restart: always
    ports:
      - 3000:3000
    networks:
      - common.network

networks:
  common.network:
    driver: bridge
